<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Document declaration, specifying language as English -->
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Viewport settings for responsive design -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Page title -->
    <title>Duolingo exercise</title>
    <!-- Preconnect to Google Fonts and import Fredoka font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <!-- CSS styles -->
    <style>
        /* Custom CSS styles go here */
        :root {
            --grey-color: rgb(228, 228, 228);
            --darker-grey-color: rgb(189, 189, 189);
            --text-color: rgb(60, 60, 60);
            --border-radius: 15px;
        }

        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            user-select: none;
            font-family: "Fredoka";
            color: var(--text-color);
            background-color: rgb(250, 250, 250);
        }

        .wrapper {
            height: 60vh;
            width: 50vw;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 5em;
        }

        h1 {
            width: 100%;
            font-weight: 600;
            text-align: left;
        }

        .top__container {
            margin-top: 50px;
            width: 100%;
            height: 250px;
        }

        .image_text__container {
            display: flex;
            justify-content: flex-start;
            align-items: center;
        }

        img {
            width: 150px;
            display: block;
        }

        #original__text {
            border: 2px solid var(--grey-color);
            padding: 1em;
            width: auto;
            border-radius: var(--border-radius);
            margin-left: 20px;
            font-size: 1.2em;
        }

        span {
            display: inline-block;
            border-bottom: 2px dashed var(--darker-grey-color);
            margin-right: 5px;
        }

        #destination__container {
            padding: 0.5em 0;
            height: 60px;
            width: 100%;
            border-top: 2px solid var(--grey-color);
            border-bottom: 2px solid var(--grey-color);
            display: flex;
            justify-content: flex-start;
            align-items: center;
        }

        #origin__container {
            padding: 3em 0;
            width: 100%;
            display: flex;
            justify-content: flex-start;
            align-items: center;
        }

        .word {
            position: relative;
            border: 1px solid var(--grey-color);
            background-color: white;
            margin: 0 0.2em;
            padding: 0.5em 1em;
            border-radius: var(--border-radius);
            box-shadow: 0px 3px 0px 0px var(--grey-color);
            transition: 0.2s transform ease-in-out;
            cursor: pointer;
            z-index: 1;
            font-size: 1.2em;
            font-weight: 400;
        }

        .word__container {
            margin: 0 0.2em;
            padding: 0.5em 1em;
            border-radius: var(--border-radius);
        }

        .word__container:empty {
            background: var(--grey-color);
        }

        .word:active {
            transform: translateY(2px);
            box-shadow: none;
        }

        footer {
            position: fixed;
            bottom: 0;
            border-top: 2px solid var(--grey-color);
            width: 100%;
            display: flex;
            justify-content: space-around;
            align-items: center;
            padding: 2em 5em;
        }

        .skip_button,
        .check_button {
            font-size: 1em;
            font-weight: 600;
            padding: 0.8em 2.5em;
            border-radius: var(--border-radius);
            transition: 0s all ease-in-out;
            cursor: pointer;
        }

        .skip_button {
            color: var(--darker-grey-color);
            border: 1px solid var(--grey-color);
            background-color: white;
            box-shadow: 0px 3px 0px 0px var(--grey-color);
        }

        .skip_button:hover {
            background-color: rgba(143, 157, 173, 0.2);
        }

        .check_button {
            color: white;
            border: 1px solid #2ec748;
            background-color: #2ec748;
            box-shadow: 0px 3px 0px 0px #27aa3d;
        }

        .check_button:hover {
            background-color: #33db4f;
        }

        .skip_button:active,
        .check_button:active {
            transform: translateY(2px);
            box-shadow: none;
        }
    </style>
</head>

<body>
    <!-- Main content area -->
    <div class="wrapper">
        <!-- Title -->
        <h1>Write this in Japanese</h1>
        <!-- Top container -->
        <div class="top__container">
            <!-- Container with image and text -->
            <div class="image_text__container">
                <!-- Duolingo image -->
                <img src="/duo.svg" alt="duo">
                <!-- Original text -->
                <p id="original__text"></p>
            </div>
            <!-- Destination container -->
            <div id="destination__container">
            </div>
        </div>
        <!-- Origin text container -->
        <div id="origin__container">
        </div>
    </div>
    <!-- Page footer -->
    <footer>
        <!-- Skip button -->
        <div id="skip_button" class="skip_button">SKIP</div>
        <!-- Check button -->
        <div class="check_button">CHECK</div>
    </footer>


    <!-- JavaScript script -->
    <script>
        // List of exercises with Chinese and Japanese sentences
        window.addEventListener('load', (event) => {
            const exercises = [
                {
                    chinese: "我是一隻貓",
                    japanese: "私は猫です",
                    list: ["は", "で", "私", "す", "猫"],
                },
                {
                    chinese: "這是學校啊",
                    japanese: "これは学校ですね",
                    list: ["学", "こ", "は", "で", "ね", "校", "れ", "す"],
                },
                {
                    chinese: "是，是這樣",
                    japanese: "はい、そうですね",
                    list: ["は", "そ", "、", "で", "ね", "い", "う", "す"],
                },
                {
                    chinese: "我正在學習新的語言",
                    japanese: "新しい言語を学んでいます",
                    list: ["新しい", "を", "言語", "います", "学んで"],
                },
                {
                    chinese: "這個城市很繁華",
                    japanese: "この街はとても賑やかです",
                    list: ["とても", "は", "街", "です", "賑やか"],
                },
                {
                    chinese: "我最喜歡的食物是壽司",
                    japanese: "私の好きな食べ物は寿司です",
                    list: ["好きな", "寿司", "です", "私の", "食べ物"],
                },
                {
                    chinese: "我每天都運動",
                    japanese: "私は毎日運動します",
                    list: ["毎日", "します", "私は", "運動"],
                },
                {
                    chinese: "這是我的手機",
                    japanese: "これは私の携帯電話です",
                    list: ["これは", "携帯電話", "です", "私の"],
                },
                {
                    chinese: "我昨天看了一部電影",
                    japanese: "昨日、私は映画を見ました",
                    list: ["えました", "きました", "じつ", "た", "私は", "映画", "見", "る"],
                },
                {
                    chinese: "他們一起去旅行了",
                    japanese: "彼らは一緒に旅行しました",
                    list: ["一緒に", "しました", "旅行", "は", "彼ら"],
                },
                {
                    chinese: "這個問題很難",
                    japanese: "この問題は難しいです",
                    list: ["これ", "です", "は", "問題", "難しい"],
                },
                {
                    chinese: "我們明天要去海邊玩",
                    japanese: "私たちは明日海辺に行く予定です",
                    list: ["た", "い", "たい", "に", "たす", "ます", "ます", "行く", "海辺", "私たちは", "予定"],
                },
                {
                    chinese: "這是我妹妹的書包",
                    japanese: "これは私の妹のかばんです",
                    list: ["これは", "かばん", "です", "の", "私の", "妹"],
                },
                {
                    chinese: "他們在公園裡散步",
                    japanese: "彼らは公園で散歩しています",
                    list: ["ています", "は", "公園で", "彼ら", "散歩"],
                },
                {
                    chinese: "我喜歡冬天的雪",
                    japanese: "私は冬の雪が好きです",
                    list: ["です", "が", "の", "私は", "好き", "雪"],
                },
                {
                    chinese: "這間餐廳的食物很美味",
                    japanese: "このレストランの料理はとても美味しいです",
                    list: ["この", "た", "ても", "は", "の", "め", "います", "料理", "美味しい", "食物"],
                },
                {
                    chinese: "我們一起慶祝生日吧",
                    japanese: "一緒に誕生日を祝いましょう",
                    list: ["い", "おう", "に", "生日", "一緒に", "ましょう", "祝い", "誕"],
                },
                {
                    chinese: "這個電影非常有趣",
                    japanese: "この映画はとても面白いです",
                    list: ["いです", "か", "が", "この", "た", "ても", "映画", "面白い", "ます"],
                },
                {
                    chinese: "我每天都喝咖啡",
                    japanese: "私は毎日にコーヒーを飲みます",
                    list: ["ます", "コーヒー", "を", "私", "飲み","毎日","は","に"],
                },
                
                // Add more exercises as needed
            ];

            // Get references to HTML elements
            const destinationContainer = document.getElementById("destination__container");
            const originContainer = document.getElementById("origin__container");
            const originalText = document.getElementById("original__text");
            const words = document.getElementsByClassName("word");

            // Default position of the destination container
            let destinationPosDefault = destinationContainer.getBoundingClientRect();

            // Arrays to store word positions
            let destinationArray = [];
            const originArray = [];

            // Select a random exercise
            let exercise = exercises[Math.floor(Math.random() * exercises.length)];
            let chineseSentence = exercise.chinese.split(" ");
            let listOfWords = exercise.list;

            // Display Chinese sentence and list of words
            for (let i = 0; i < chineseSentence.length; i++) {
                const spanNode = document.createElement("span");
                spanNode.textContent = chineseSentence[i];
                originalText.appendChild(spanNode);
            }

            for (let i = 0; i < listOfWords.length; i++) {
                const wordNode = document.createElement("div");
                wordNode.textContent = listOfWords[i];
                wordNode.classList.add("word");
                originContainer.appendChild(wordNode);
            }

            // Function to calculate the cursor position for destination container
            function calibrateDestinationCursorPos(destinationArray) {
                if (destinationArray.length === 0) {
                    return destinationPosDefault.x;
                } else {
                    let sum = destinationPosDefault.x;
                    destinationArray.forEach((element) => {
                        sum += element.width + 20;
                    });
                    return sum;
                }
            }

            // Function to create an array of word positions in the origin container
            function createOriginArray(word) {
                let wordPosition = word.getBoundingClientRect();
                let newWordObject = Object.assign(wordPosition);
                newWordObject.word = word.textContent;
                newWordObject.location = "origin";
                originArray.push(newWordObject);
            }

            // Create the origin array
            for (let i = 0; i < words.length; i++) {
                createOriginArray(words[i]);

                // Add click event listener to each word
                words[i].addEventListener("click", () => {
                    destinationStartPos = calibrateDestinationCursorPos(destinationArray);
                    let yTravel =
                        originArray[i].y -
                        (destinationPosDefault.y +
                            (destinationPosDefault.height - originArray[i].height) / 2);
                    let xTravel = (originArray[i].x > destinationStartPos) ?
                        -(originArray[i].x - destinationStartPos) :
                        destinationStartPos - originArray[i].x;

                    // Move the word to the destination container or back to the origin
                    if (originArray[i].location === "origin") {
                        originArray[i].location = "destination";
                        destinationArray.push(originArray[i]);
                    } else if (originArray[i].location === "destination") {
                        yTravel = 0;
                        xTravel = 0;
                        originArray[i].location = "origin";
                        let test = destinationArray.filter(
                            (wordObject) => wordObject.word !== originArray[i].word
                        );
                        destinationArray = test;
                    }

                    // Apply the transformation to the clicked word
                    words[i].style.transform = `translate(${xTravel}px,-${yTravel}px)`;
                });
            }

            // Get references to other HTML elements
            const checkButton = document.querySelector(".check_button");
            const skipButton = document.querySelector("#skip_button");
            const resultMessage = document.getElementById("result__message");
            const resetButton = document.getElementById("reset__button");


            // Add click event listener to the check button
            checkButton.addEventListener("click", () => {
                console.log("Selected words:", destinationArray.map(obj => obj.word));
                console.log("Correct order:", exercise.japanese);

                // Extract the selected Japanese sentence from the destinationArray
                const selectedSentence = destinationArray.map(obj => obj.word).join("");

                // Compare the entire selected sentence with the correct Japanese sentence
                let isCorrect = selectedSentence === exercise.japanese;

                // Display result message
                resultMessage.textContent = isCorrect ? "Correct!" : "Incorrect!";
                resultMessage.style.color = isCorrect ? "green" : "red";

            });

            // Skip button click event
            // Skip button click event
            skipButton.addEventListener("click", () => {
                // Select a new random exercise
                exercise = exercises[Math.floor(Math.random() * exercises.length)];
                chineseSentence = exercise.chinese.split(" ");
                listOfWords = exercise.list;

                // Clear the original text and origin container
                originalText.innerHTML = "";
                originContainer.innerHTML = "";

                // Display the new Chinese sentence and list of words
                for (let i = 0; i < chineseSentence.length; i++) {
                    const spanNode = document.createElement("span");
                    spanNode.textContent = chineseSentence[i];
                    originalText.appendChild(spanNode);
                }

                for (let i = 0; i < listOfWords.length; i++) {
                    const wordNode = document.createElement("div");
                    wordNode.textContent = listOfWords[i];
                    wordNode.classList.add("word");
                    originContainer.appendChild(wordNode);

                    // Add click event listener to each new word
                    wordNode.addEventListener("click", () => {
                        // Use calibrateDestinationCursorPos(destinationArray) instead of destinationStartPos
                        let yTravel =
                            originArray[i].y -
                            (destinationPosDefault.y +
                                (destinationPosDefault.height - originArray[i].height) / 2);
                        let xTravel = (originArray[i].x > calibrateDestinationCursorPos(destinationArray)) ?
                            -(originArray[i].x - calibrateDestinationCursorPos(destinationArray)) :
                            calibrateDestinationCursorPos(destinationArray) - originArray[i].x;

                        // Move the word to the destination container or back to the origin
                        if (originArray[i].location === "origin") {
                            originArray[i].location = "destination";
                            destinationArray.push(originArray[i]);
                        } else if (originArray[i].location === "destination") {
                            yTravel = 0;
                            xTravel = 0;
                            originArray[i].location = "origin";
                            let test = destinationArray.filter(
                                (wordObject) => wordObject.word !== originArray[i].word
                            );
                            destinationArray = test;
                        }

                        // Apply the transformation to the clicked word
                        wordNode.style.transform = `translate(${xTravel}px,-${yTravel}px)`;
                    });
                }
            });
        });


    </script>

    <p id="result__message"></p>
</body>

</html>